<?php
/**
 * @file
 * Code for the Farm Log: Observation feature.
 */

// Include Features code.
include_once 'farm_log_observation.features.inc';

/**
 * Implements hook_farm_access_perms().
 */
function farm_log_observation_farm_access_perms($role) {

  // Assemble a list of log types provided by this module.
  $types = array(
    'log' => array(
      'farm_observation',
    ),
    'taxonomy' => array(
      'farm_observation_types',
    ),
  );

  // Grant different CRUD permissions based on the role.
  $perms = array();
  switch ($role) {

    // Farm Manager and Worker
    case 'Farm Manager':
    case 'Farm Worker':
      $perms = farm_access_entity_perms($types);
      break;

    // Farm Viewer
    case 'Farm Viewer':
      $perms = farm_access_entity_perms($types, array('view'));
      break;
  }

  return $perms;
}

/**
 * Implements hook_farm_admin_actions().
 */
function farm_log_observation_farm_admin_actions() {

  // Define farm area actions.
  $actions = array(
    'observation' => array(
      'title' => t('Add an observation'),
      'href' => 'log/add/farm_observation',
      'assets' => array(
        'all',
      ),
      'views' => array(
        'farm_log_observation',
      ),
      'paths' => array(
        'taxonomy/term/%',
      ),
    ),
  );
  return $actions;
}

/**
 * Implements hook_farm_taxonomy_term_view_views().
 */
function farm_log_observation_farm_taxonomy_term_view_views($term) {

  // If the term is not an area, bail.
  if ($term->vocabulary_machine_name != 'farm_areas') {
    return array();
  }

  // Return a list of Views to include on Areas.
  return array(

    // Observations in this area.
    array(
      'name' => 'farm_log_observation',
      'arg' => 2,
    ),
  );
}

/**
 * Implements hook_farm_area_links().
 */
function farm_log_observation_farm_area_links($id) {
  $links = array();

  // Add link to observations.
  $view = views_get_view('farm_log_observation');
  $view->preview('default', array('all', $id));
  if ($view->total_rows > 0) {
    $links[] = array(
      'title' => t('Observations') . ': ' . $view->total_rows,
      'href' => 'farm/logs/observations/all/' . $id,
      'weight' => -100,
    );
  }

  return $links;
}

/**
 * Implements hook_form_alter().
 */
function farm_log_observation_form_alter(&$form, &$form_state, $form_id) {

  // If this is an observation log form...
  if ($form_id == 'log_form' && ($form['#bundle'] == 'farm_observation')) {

    // If the observation type field is empty, prepopulate it with "General".
    if (empty($form['field_farm_observation_type'][LANGUAGE_NONE]['#default_value'])) {
      if (!empty($form['field_farm_observation_type'][LANGUAGE_NONE]['#options'])) {

        // If "General" doesn't exist as an option, create it.
        if (!in_array('General', $form['field_farm_observation_type'][LANGUAGE_NONE]['#options'])) {
          $term = _farm_log_observation_create_general();
          if (!empty($term->tid) && !empty($term->name)) {
            $form['field_farm_observation_type'][LANGUAGE_NONE]['#options'][$term->tid] = $term->name;
          }
        }

        // Iterate through the options and select "General" by default.
        foreach ($form['field_farm_observation_type'][LANGUAGE_NONE]['#options'] as $tid => $name) {
          if ($name == 'General') {
            $form['field_farm_observation_type'][LANGUAGE_NONE]['#default_value'] = $tid;
          }
        }
      }
    }
  }
}

/**
 * Helper function to create a 'General' observation type.
 *
 * @return object|bool
 *   Returns the term object if it is found/created. FALSE if the vocabulary
 *   doesn't exist.
 */
function _farm_log_observation_create_general() {

  // Define the name of the vocabulary.
  $vocab_name = 'farm_observation_types';

  // Load the Observation Types vocabulary.
  $vocab = taxonomy_vocabulary_machine_name_load($vocab_name);

  // If the vocab didn't load, bail.
  if (empty($vocab->vid)) {
    return FALSE;
  }

  // Check to see if the term already exists.
  $term = taxonomy_get_term_by_name('General', $vocab_name);

  // If the term already exists, bail.
  if (!empty($term->tid)) {
    return $term;
  }

  // Create the term.
  $term = new stdClass();
  $term->name = 'General';
  $term->vid = $vocab->vid;

  // Save the term.
  taxonomy_term_save($term);

  // Return the new term.
  return $term;
}
